/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Collector } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {AddTool, ClarificationRequest, DivideTool, DoneForNow, MultiplyTool, SubtractTool} from "./types"
import type TypeBuilder from "./type_builder"

export class LlmResponseParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  DetermineNextStep(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ClarificationRequest | DoneForNow | AddTool | SubtractTool | MultiplyTool | DivideTool {
    try {
      return this.runtime.parseLlmResponse(
        "DetermineNextStep",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ClarificationRequest | DoneForNow | AddTool | SubtractTool | MultiplyTool | DivideTool
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class LlmStreamParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  DetermineNextStep(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (((partial_types.ClarificationRequest | null) | (partial_types.DoneForNow | null) | null) | ((partial_types.AddTool | null) | (partial_types.SubtractTool | null) | (partial_types.MultiplyTool | null) | (partial_types.DivideTool | null) | null)) {
    try {
      return this.runtime.parseLlmResponse(
        "DetermineNextStep",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (((partial_types.ClarificationRequest | null) | (partial_types.DoneForNow | null) | null) | ((partial_types.AddTool | null) | (partial_types.SubtractTool | null) | (partial_types.MultiplyTool | null) | (partial_types.DivideTool | null) | null))
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}