/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "agent.baml": "// human tools are async requests to a human\ntype HumanTools = ClarificationRequest | DoneForNow\n\nclass ClarificationRequest {\n  intent \"request_more_information\" @description(\"you can request more information from me\")\n  message string\n}\n\nclass DoneForNow {\n  intent \"done_for_now\"\n\n  message string @description(#\"\n    message to send to the user about the work that was done. \n  \"#)\n}\n\nfunction DetermineNextStep(\n    thread: string \n) -> HumanTools | CalculatorTools {\n    client \"openai/gpt-4o\"\n\n    prompt #\"\n        {{ _.role(\"system\") }}\n\n        You are a helpful assistant that can help with tasks.\n\n        {{ _.role(\"user\") }}\n\n        You are working on the following thread:\n\n        {{ thread }}\n\n        What should the next step be?\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest HelloWorld {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      {\n        \"type\": \"user_input\",\n        \"data\": \"hello!\"\n      }\n    \"#\n  }\n  @@assert(intent, {{this.intent == \"done_for_now\"}})\n}\n\ntest MathOperation {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      {\n        \"type\": \"user_input\",\n        \"data\": \"can you multiply 3 and 4?\"\n      }\n    \"#\n  }\n  @@assert(intent, {{this.intent == \"multiply\"}})\n}\n\ntest LongMath {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      [\n        {\n          \"type\": \"user_input\",\n          \"data\": \"can you multiply 3 and 4, then divide the result by 2 and then add 12 to that result?\"\n        },\n        {\n          \"type\": \"tool_call\",\n          \"data\": {\n            \"intent\": \"multiply\",\n            \"a\": 3,\n            \"b\": 4\n          }\n        },\n        {\n          \"type\": \"tool_response\",\n          \"data\": 12\n        },\n        {\n          \"type\": \"tool_call\", \n          \"data\": {\n            \"intent\": \"divide\",\n            \"a\": 12,\n            \"b\": 2\n          }\n        },\n        {\n          \"type\": \"tool_response\",\n          \"data\": 6\n        },\n        {\n          \"type\": \"tool_call\",\n          \"data\": {\n            \"intent\": \"add\", \n            \"a\": 6,\n            \"b\": 12\n          }\n        },\n        {\n          \"type\": \"tool_response\",\n          \"data\": 18\n        }\n      ]\n    \"#\n  }\n  @@assert(intent, {{this.intent == \"done_for_now\"}})\n  @@assert(answer, {{\"18\" in this.message}})\n}\n\n\n",
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.85.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "tool_calculator.baml": "type CalculatorTools = AddTool | SubtractTool | MultiplyTool | DivideTool\n\n\nclass AddTool {\n    intent \"add\"\n    a int | float\n    b int | float\n}\n\nclass SubtractTool {\n    intent \"subtract\"\n    a int | float\n    b int | float\n}\n\nclass MultiplyTool {\n    intent \"multiply\"\n    a int | float\n    b int | float\n}\n\nclass DivideTool {\n    intent \"divide\"\n    a int | float\n    b int | float\n}\n\n",
}
export const getBamlFiles = () => {
    return fileMap;
}