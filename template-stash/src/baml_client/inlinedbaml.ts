/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "agent.baml": "// human tools are async requests to a human\ntype HumanTools = ClarificationRequest | DoneForNow\n\nclass ClarificationRequest {\n  intent \"request_more_information\" @description(\"you can request more information from me\")\n  message string\n}\n\nclass DoneForNow {\n  intent \"done_for_now\"\n\n  message string @description(#\"\n    message to send to the user about the work that was done. \n  \"#)\n}\n\nfunction DetermineNextStep(\n    thread: string \n) -> HumanTools | CalculatorTools {\n    client CustomSonnet\n\n    prompt #\"\n        {{ _.role(\"system\") }}\n\n        TODO(vaibhav) basic prompt\n\n        - ...\n        - ...\n        - ...\n\n        {{ _.role(\"user\") }}\n\n        TODO(vaibhav) basic user\n\n        You are working on the following thread:\n\n        {{ thread }}\n\n\n        What should the next step be?\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest InitialEmail {\n\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      \n          Events:\n              <email_received>: \n                  {\"from_address\":\"test@example.com\",\"to_address\":\"support@company.com\",\"subject\":\"New Ticket\",\"body\":\"Can you make a new issue for Austin to restock the fridges with tasty beers?\",\"message_id\":\"test123\",\"previous_thread\":[],\"raw_email\":\"raw email content\",\"is_test\":null}\n              </email_received>\n\n              \n          \n    \"#\n  }\n}\n\n\ntest TeamIDErrorAsksForMoreInput {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      \n          Events:\n              <email_received>:\n                  {\"from_address\":\"test@example.com\",\"to_address\":\"support@company.com\",\"subject\":\"New Ticket\",\"body\":\"Can you make a new issue for Austin to restock the fridges with tasty beers?\",\"message_id\":\"test123\",\"previous_thread\":[],\"raw_email\":\"raw email content\",\"is_test\":null}\n              </email_received>\n              \n      <create_issue> \n                  Title: Restock fridges with tasty beers\n                  Description: Austin is requested to restock the fridges with tasty beers.\n                  Team ID: team_supply_maintenance\n              </create_issue>\n              \n      <issue_create_result>: \n                  {\"errors\": [{\"message\": \"Argument Validation Error\", \"path\": [\"issueCreate\"], \"locations\": [{\"line\": 3, \"column\": 13}], \"extensions\": {\"code\": \"INVALID_INPUT\", \"type\": \"invalid input\", \"userError\": true, \"userPresentableMessage\": \"teamId must be a UUID.\", \"meta\": {}}}], \"data: null}\"\n              </issue_create_result>\n              \n          \n    \"#\n  }\n  @@assert({{this.intent == \"list_teams\"}})\n}\n\n\ntest CompletedIssueCreate {\n  functions [DetermineNextStep]\n  args {\n    thread #\"\n      \n          Events:\n              <email_received>\n                  {\"from_address\":\"test@example.com\",\"to_address\":\"support@company.com\",\"subject\":\"New Ticket\",\"body\":\"Can you make a new issue for Austin to restock the fridges with tasty beers?\",\"message_id\":\"test123\",\"previous_thread\":[],\"raw_email\":\"raw email content\",\"is_test\":null}\n              </email_received>\n              \n      <create_issue>\n                  Title: Restock fridges with tasty beers\n                  Description: Austin is requested to restock the fridges with tasty beers.\n                  Team ID: team_supply_maintenance\n      </create_issue>\n              \n      <issue_create_result>\n                  {\"errors\": [{\"message\": \"Argument Validation Error\", \"path\": [\"issueCreate\"], \"locations\": [{\"line\": 3, \"column\": 13}], \"extensions\": {\"code\": \"INVALID_INPUT\", \"type\": \"invalid input\", \"userError\": true, \"userPresentableMessage\": \"teamId must be a UUID.\", \"meta\": {}}}], \"data\": null}\n      </issue_create_result>\n              \n      <request_more_information>\n                  {\"intent\":\"request_more_information\",\"message\":\"The team ID provided (team_supply_maintenance) is not a valid UUID, which caused the issue creation to fail. Please provide a valid UUID for the team.\"}\n              </request_more_information>\n              \n      <human_response>\n                  Message: use a different team id, perhaps try running list-teams?\n      </human_response>\n              \n      <list_teams>\n                  {\"intent\":\"list_teams\",\"teams\":[]}\n              </list_teams>\n              \n      <list_teams_result>\n                  {\"data\": {\"teams\": {\"nodes\": [{\"id\": \"b1af0caf-0a15-4d27-a71a-7076f71948bf\", \"name\": \"Operations\", \"members\": {\"nodes\": [{\"email\": \"...\", \"id\": \"d9b7a650-e5f3-48d7-ba25-fe72a505cdf1\", \"displayName\": \"austin\"}, {\"email\": \"...\", \"id\": \"16765c85-2286-4c0f-ab49-0d4d79222ef5\", \"displayName\": \"dexter\"}]}}]}}}\n      </list_teams_result>\n              \n      <create_issue>\n                  Title: Restock fridges with tasty beers\n                  Description: Austin is requested to restock the fridges with tasty beers.\n                  Team ID: b1af0caf-0a15-4d27-a71a-7076f71948bf\n      </create_issue>\n              \n      <issue_create_result>\n                  {\"data\": {\"issueCreate\": {\"success\": true, \"issue\": {\"id\": \"bd1c1df8-1399-49be-b96c-b175db42ab1e\", \"title\": \"Restock fridges with tasty beers\", \"description\": \"Austin is requested to restock the fridges with tasty beers.\"}}}}\n      </issue_create_result>\n              \n          \n    \"#\n  }\n  @@assert({{this.intent == \"done_for_now\"}})\n}\n",
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\n// todo(vaibhav) add other clients and stuff\n\nclient<llm> O1 {\n  provider openai\n  options {\n    model \"o1-preview\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\nclient<llm> O1FallbackSonnet36 {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [O1, CustomSonnet]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nclient<llm> Sonnet36FallbackO1 {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomSonnet, O1]\n  }\n}\n\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "generator ts {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../src\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.84.4\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n\n",
  "tool_calculator.baml": "type CalculatorTools = AddTool | SubtractTool | MultiplyTool | DivideTool\n\n\nclass AddTool {\n    intent \"add\"\n    a int | float\n    b int | float\n}\n\nclass SubtractTool {\n    intent \"subtract\"\n    a int | float\n    b int | float\n}\n\nclass MultiplyTool {\n    intent \"multiply\"\n    a int | float\n    b int | float\n}\n\nclass DivideTool {\n    intent \"divide\"\n    a int | float\n    b int | float\n}\n\n",
}
export const getBamlFiles = () => {
    return fileMap;
}